{
  "locales": [
    {
      "code": "en",
      "name": "English"
    },
    {
      "code": "es",
      "name": "Español (Spanish)"
    },
    {
      "code": "fr",
      "name": "Français (French)"
    },
    {
      "code": "ne",
      "name": "नेपाली (Nepali)"
    },
    {
      "code": "sw",
      "name": "Kiswahili (Swahili)"
    }
  ],
  "locale": "en",
  "locale_outgoing": "en",
  "date_format": "D MMM, YYYY",
  "reported_date_format": "DD-MMM-YYYY HH:mm:ss",
  "forms_only_mode": false,
  "place_hierarchy_types": [
    "district_hospital",
    "health_center"
  ],
  "default_responses": {
    "start_date": ""
  },
  "district_admins_access_unallocated_messages": false,
  "public_access": false,
  "default_country_code": 1,
  "gateway_number": "+13125551212",
  "kujua-reporting": [
    {
      "code": "VPD",
      "reporting_freq": "weekly"
    }
  ],
  "dhisDataSets": [
    {
      "guid": "VMuFODsyWaO",
      "label": "MoH Monthly Integration"
    }
  ],
  "schedule_morning_hours": 0,
  "schedule_morning_minutes": 0,
  "schedule_evening_hours": 23,
  "schedule_evening_minutes": 0,
  "synthetic_date": "",
  "contact_display_short": "clinic.name",
  "roles": {
    "data_entry": {
      "name": "usertype.data-entry"
    },
    "analytics": {
      "name": "usertype.analytics"
    },
    "gateway": {
      "name": "usertype.gateway"
    },
    "program_officer": {
      "name": "usertype.program-officer"
    },
    "crfo": {
      "name": "usertype.crfo"
    },
    "chw_supervisor": {
      "name": "usertype.chw-supervisor",
      "offline": true
    },
    "chw": {
      "name": "usertype.chw",
      "offline": true
    }
  },
  "permissions": {
    "can_access_gateway_api": [
      "gateway"
    ],
    "can_bulk_delete_reports": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_configure": [
      "program_officer",
      "crfo"
    ],
    "can_create_people": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_create_places": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_create_records": [
      "data_entry",
      "gateway",
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_create_users": [
      "program_officer"
    ],
    "can_delete_contacts": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_delete_messages": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_delete_reports": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_delete_users": [
      "program_officer"
    ],
    "can_edit": [
      "gateway",
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_edit_profile": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_edit_verification": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_export_all": [
      "program_officer",
      "crfo"
    ],
    "can_export_contacts": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_export_feedback": [
      "program_officer"
    ],
    "can_export_messages": [
      "analytics",
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_log_out_on_android": [],
    "can_update_places": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_update_reports": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_update_users": [
      "program_officer"
    ],
    "can_export_dhis": [
      "national_admin",
      "crfo"
    ],
    "can_verify_reports": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_analytics": [
      "analytics",
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_analytics_tab": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_call_action": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_contacts": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_contacts_tab": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_last_visited_date": [],
    "can_view_message_action": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_messages": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_messages_tab": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_outgoing_messages": [
      "program_officer"
    ],
    "can_view_reports": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_reports_tab": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_tasks": [
      "chw_supervisor",
      "chw"
    ],
    "can_view_tasks_tab": [
      "chw_supervisor",
      "chw"
    ],
    "can_view_unallocated_data_records": [
      "gateway",
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_users": [
      "program_officer"
    ],
    "can_write_wealth_quintiles": []
  },
  "changes_controller": {
    "reiterate_changes": true,
    "changes_limit": 100,
    "debounce_interval": 200
  },
  "uhc": {
    "contacts_default_sort": "",
    "visit_count": {
      "month_start_date": 1,
      "visit_count_goal": 0
    }
  },
  "death_reporting": {
    "mark_deceased_forms": [
      "death_report"
    ],
    "date_field": "fields.death_details.date_of_death",
    "undo_deceased_forms": [
      "undo_death_report"
    ]
  },
  "contact_types": [
    {
      "id": "district_hospital",
      "name_key": "contact.type.district_hospital",
      "group_key": "contact.type.district_hospital.plural",
      "create_key": "contact.type.district_hospital.new",
      "edit_key": "contact.type.place.edit",
      "icon": "medic-district-hospital",
      "create_form": "form:contact:district_hospital:create",
      "edit_form": "form:contact:district_hospital:edit"
    },
    {
      "id": "health_center",
      "name_key": "contact.type.health_center",
      "group_key": "contact.type.health_center.plural",
      "create_key": "contact.type.health_center.new",
      "edit_key": "contact.type.place.edit",
      "parents": [
        "district_hospital"
      ],
      "icon": "medic-health-center",
      "create_form": "form:contact:health_center:create",
      "edit_form": "form:contact:health_center:edit"
    },
    {
      "id": "clinic",
      "name_key": "contact.type.clinic",
      "group_key": "contact.type.clinic.plural",
      "create_key": "contact.type.clinic.new",
      "edit_key": "contact.type.place.edit",
      "parents": [
        "health_center"
      ],
      "icon": "medic-clinic",
      "create_form": "form:contact:clinic:create",
      "edit_form": "form:contact:clinic:edit",
      "count_visits": true
    },
    {
      "id": "person",
      "name_key": "contact.type.person",
      "group_key": "contact.type.person.plural",
      "create_key": "contact.type.person.new",
      "edit_key": "contact.type.person.edit",
      "primary_contact_key": "clinic.field.contact",
      "parents": [
        "district_hospital",
        "health_center",
        "clinic"
      ],
      "icon": "medic-person",
      "create_form": "form:contact:person:create",
      "edit_form": "form:contact:person:edit",
      "person": true
    }
  ],
  "setup_complete": true,
  "contact_summary": "var ContactSummary = {}; (function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(ContactSummary, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar contactSummary = __webpack_require__(1);\nvar contactSummaryEmitter = __webpack_require__(2);\n\nmodule.exports = contactSummaryEmitter(contactSummary, contact, reports);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nconst thisContact = contact;\r\nconst thisLineage = lineage;\r\nconst allReports = reports;\r\n\r\n\r\nconst getField = (report, fieldPath) => [...(fieldPath || '').split('.')]\r\n    .reduce((prev, fieldName) => {\r\n      if (prev === undefined) { return undefined; }\r\n      return prev[fieldName];\r\n    }, report);\r\n\r\nconst isTraveler = () => { return getField(thisContact, 'role') === 'traveler'; };\r\n\r\nconst isReportValid = function (report) {\r\n  if (report.form && report.fields && report.reported_date) { return true; }\r\n  return false;\r\n};\r\n\r\nconst hasReport = function (form) {\r\n  return allReports && allReports.some((report) => report.form === form);\r\n};\r\n\r\nconst context = {\r\n  isPassenger: isTraveler(),\r\n  hasDeclarationForm: hasReport('declaration'),\r\n  hasLocatorForm: hasReport('locator'),\r\n  hasQuarantineForm: hasReport('quarantine'),\r\n};\r\n\r\nconst fields = [\r\n  { appliesToType: 'person', label: 'patient_id', value: thisContact.patient_id, width: 4 },\r\n  { appliesToType: 'person', label: 'contact.age', value: thisContact.date_of_birth, width: 4, filter: 'age' },\r\n  { appliesToType: 'person', label: 'contact.sex', value: 'contact.sex.' + thisContact.sex, translate: true, width: 4 },\r\n  { appliesToType: 'person', label: 'person.field.phone', value: thisContact.phone, width: 4 },\r\n  { appliesToType: 'person', label: 'person.field.alternate_phone', value: thisContact.phone_alternate, width: 4 },\r\n  { appliesToType: 'person', appliesIf: isTraveler, label: 'contact.nationality', value: 'country.' + getField(thisContact, 'traveler.nationality'), translate: true, width: 4 },\r\n  { appliesToType: 'person', appliesIf: isTraveler, label: 'contact.passport', value: getField(thisContact, 'traveler.passport'), width: 4 },\r\n  { appliesToType: 'person', label: 'contact.parent', value: thisLineage, filter: 'lineage' },\r\n  { appliesToType: '!person', label: 'contact', value: thisContact.contact && thisContact.contact.name, width: 4 },\r\n  { appliesToType: '!person', label: 'contact.phone', value: thisContact.contact && thisContact.contact.phone, width: 4 },\r\n  { appliesToType: '!person', label: 'External ID', value: thisContact.external_id, width: 4 },\r\n  { appliesToType: '!person', appliesIf: function () { return thisContact.parent && thisLineage[0]; }, label: 'contact.parent', value: thisLineage, filter: 'lineage' },\r\n  { appliesToType: 'person', label: 'contact.notes', value: thisContact.notes, width: 12 },\r\n  { appliesToType: '!person', label: 'contact.notes', value: thisContact.notes, width: 12 }\r\n];\r\n\r\nconst cards = [\r\n  {\r\n    label: 'contact.profile.referral',\r\n    appliesToType: 'person',\r\n    appliesIf: function () {\r\n      return isTraveler() && !!getNewestReport(allReports, 'referral');\r\n    },\r\n    fields: function () {\r\n      const fields = [];\r\n      const report = getNewestReport(allReports, 'referral');\r\n      const temp_infra_unit = getField(report, 'fields.temp_infra_unit');\r\n      const temp_clinical_unit = getField(report, 'fields.temp_clinical_unit');\r\n      const temp_infra_unit_text = temp_infra_unit === 'celsius' ? '°C' : temp_infra_unit === 'fahrenheit' ? '°F' : '';\r\n      const temp_clinical_unit_text = temp_clinical_unit === 'celsius' ? '°C' : temp_clinical_unit === 'fahrenheit' ? '°F' : '';\r\n      if (report) {\r\n        fields.push(\r\n            { label: 'contact.profile.referral.temp_ir', value: getField(report, 'fields.temp_infra') + temp_infra_unit_text, width: 6 },\r\n            { label: 'contact.profile.referral.temp_clinical', value: getField(report, 'fields.temp_clinical') + temp_clinical_unit_text, width: 6 },\r\n            { label: 'contact.profile.referral.referred_to', value: 'contact.profile.referral.place.' + getField(report, 'fields.referred_to'), translate: true, width: 6 },\r\n            { label: '', icon: 'icon-risk', width: 6 }\r\n        );\r\n      }\r\n\r\n      return fields;\r\n    }\r\n  },\r\n\r\n  {\r\n    label: 'contact.profile.quarantine.form',\r\n    appliesToType: 'person',\r\n    appliesIf: isTraveler,\r\n    fields: function () {\r\n      const fields = [];\r\n      const report = getNewestReport(allReports, 'quarantine');\r\n      if (report) {\r\n        fields.push(\r\n            { label: 'contact.profile.quarantine.airline', value: getField(report, 'fields.flight_info.airline'), width: 4 },\r\n            { label: 'contact.profile.quarantine.flight', value: getField(report, 'fields.flight_info.flight'), width: 4 },\r\n            { label: 'contact.profile.quarantine.arrival_date', value: getField(report, 'fields.flight_info.arrival_date'), filter: 'simpleDate', width: 4 },\r\n            { label: 'contact.profile.quarantine.accomodation.stay', value: 'contact.profile.quarantine.accomodation.stay.' + getField(report, 'fields.accomodation.staying_at'), translate: true, width: 4 },\r\n            { label: 'contact.profile.quarantine.accomodation.province', value: getField(report, 'fields.accomodation.province'), width: 4 },\r\n            { label: 'contact.profile.quarantine.accomodation.district', value: getField(report, 'fields.accomodation.district'), width: 4 },\r\n            { label: 'contact.profile.quarantine.accomodation.municipality', value: getField(report, 'fields.accomodation.municipality'), width: 4 },\r\n            { label: 'contact.profile.quarantine.accomodation.ward', value: getField(report, 'fields.accomodation.ward'), width: 4 },\r\n            { label: 'contact.profile.quarantine.accomodation.house', value: getField(report, 'fields.accomodation.house'), width: 4 },\r\n            { label: 'contact.profile.quarantine.accomodation.landline', value: getField(report, 'fields.accomodation.landline'), width: 4 },\r\n            { label: 'contact.profile.quarantine.accomodation.mobile', value: getField(report, 'fields.accomodation.mobile'), width: 4 }\r\n        );\r\n      }\r\n      else {\r\n        fields.push({ label: 'contact.profile.quarantine.form.none' });\r\n      }\r\n\r\n      return fields;\r\n    }\r\n  },\r\n\r\n  {\r\n    label: 'contact.profile.declaration.form',\r\n    appliesToType: 'person',\r\n    appliesIf: isTraveler,\r\n    fields: function () {\r\n      const fields = [];\r\n      const report = getNewestReport(allReports, 'declaration');\r\n      if (report) {\r\n        const contactRiskFactors = getRiskFactors(getField(report, 'fields.contact_info'));\r\n        const healthRiskFactors = getRiskFactors(getField(report, 'fields.health'));\r\n\r\n        if (contactRiskFactors && contactRiskFactors.length > 0) {\r\n          fields.push({ label: 'risk.contact.found', width: 12, icon: 'icon-risk' });\r\n          contactRiskFactors.forEach(function (risk) {\r\n            fields.push({ value: 'risk.contact.' + risk, translate: true, width: 12 });\r\n          });\r\n        }\r\n\r\n        else {\r\n          fields.push({ label: 'risk.contact.none' });\r\n        }\r\n\r\n        if (healthRiskFactors && healthRiskFactors.length > 0) {\r\n          fields.push({ label: 'risk.health.found', width: 12, icon: 'icon-risk' });\r\n          healthRiskFactors.forEach(function (risk) {\r\n            fields.push({ value: 'risk.health.' + risk, translate: true, width: 12 });\r\n          });\r\n        }\r\n\r\n        else {\r\n          fields.push({ label: 'risk.health.none' });\r\n        }\r\n\r\n      }\r\n      else {\r\n        fields.push({ label: 'contact.profile.declaration.form.none' });\r\n      }\r\n\r\n      return fields;\r\n    }\r\n  },\r\n\r\n  {\r\n    label: 'contact.profile.locator.form',\r\n    appliesToType: 'person',\r\n    appliesIf: isTraveler,\r\n    fields: function () {\r\n      const fields = [];\r\n      const report = getNewestReport(allReports, 'locator');\r\n      if (report) {\r\n        fields.push(\r\n            { label: 'contact.profile.locator.airline', value: getField(report, 'fields.flight_info.airline'), width: 4 },\r\n            { label: 'contact.profile.locator.flight', value: getField(report, 'fields.flight_info.flight'), width: 4 },\r\n            { label: 'contact.profile.locator.arrival_date', value: getField(report, 'fields.flight_info.arrival_date_updated') || getField(report, 'fields.flight_info.arrival_date'), filter: 'simpleDate', width: 4 }\r\n\r\n        );\r\n      }\r\n      else {\r\n        fields.push({ label: 'contact.profile.locator.form.none' });\r\n      }\r\n\r\n      return fields;\r\n    }\r\n  }\r\n\r\n];\r\n\r\nfunction getRiskFactors(group) {\r\n  if (!group) return false;\r\n  const riskFactors = [];\r\n  Object.keys(group).forEach(function (key) {\r\n    if (group[key] === 'true' && key.indexOf('_risk') < 0) {\r\n      riskFactors.push(key);\r\n    }\r\n  });\r\n  return riskFactors;\r\n}\r\n\r\nfunction getNewestReport(allReports, forms) {\r\n  let result;\r\n  allReports && allReports.forEach(function (report) {\r\n    if (!isReportValid(report) || !forms.includes(report.form)) { return; }\r\n    if (!result || report.reported_date > result.reported_date) {\r\n      result = report;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  context: context,\r\n  cards: cards,\r\n  fields: fields\r\n};\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nfunction emitter(contactSummary, contact, reports) {\n  var fields = contactSummary.fields || [];\n  var context = contactSummary.context || {};\n  var cards = contactSummary.cards || [];\n\n  var contactType = contact && (contact.contact_type || contact.type);\n\n  var result = {\n    cards: [],\n    fields: fields.filter(function(f) {\n      var appliesToType = convertToArray(f.appliesToType);\n      var appliesToNotType = appliesToType.filter(function(type) {\n        return type && type.charAt(0) === '!';\n      });\n      if (appliesToType.includes(contactType) ||\n          (appliesToNotType.length > 0 && !appliesToNotType.includes('!' + contactType))) {\n        if (!f.appliesIf || f.appliesIf()) {\n          delete f.appliesToType;\n          delete f.appliesIf;\n          return true;\n        }\n      }\n    }),\n  };\n\n  cards.forEach(function(card) {\n    var idx1, r, added;\n\n    var appliesToType = convertToArray(card.appliesToType);\n\n    if (appliesToType.includes('report') && appliesToType.length > 1) {\n      throw new Error(\"You cannot set appliesToType to an array which includes the type 'report' and another type.\");\n    }\n    \n    if (appliesToType.includes('report')) {\n      for (idx1=0; idx1<reports.length; ++idx1) {\n        r = reports[idx1];\n        if (!isReportValid(r)) {\n          continue;\n        }\n\n        added = addCard(card, context, r);\n        if (added) {\n          result.cards.push(added);\n        }\n      }\n    } else {\n      if (!appliesToType.includes(contactType)) {\n        return;\n      }\n\n      added = addCard(card, context);\n      if (added) {\n        result.cards.push(added);\n      }\n    }\n  });\n\n  result.context = context;\n\n  // return the result for 2.13+ as per #2635\n  return result;\n}\n\nfunction convertToArray(appliesToType) {\n  return Array.isArray(appliesToType) ? appliesToType : [appliesToType];  \n}\n\nfunction isReportValid(report) {\n  // valid XForms won't have .errors field\n  // valid JSON forms will have empty array errors:[]\n  return report && !(report.errors && report.errors.length);\n}\n\nfunction addCard(card, context, r) {\n  if (!card.appliesIf(r)) return;\n\n  function addValue(src, dst, prop) {\n    switch(typeof src[prop]) {\n      case 'undefined': return;\n      case 'function': dst[prop] = src[prop](r); break;\n      default: dst[prop] = src[prop];\n    }\n  }\n\n  var fields = typeof card.fields === 'function' ?\n      card.fields(r) :\n      card.fields\n        .filter(function(f) {\n          switch(typeof f.appliesIf) {\n            case 'undefined': return true;\n            case 'function':  return f.appliesIf(r);\n            default:          return f.appliesIf;\n          }\n        })\n        .map(function(f) {\n          var ret = {};\n          addValue(f, ret, 'label');\n          addValue(f, ret, 'value');\n          addValue(f, ret, 'translate');\n          addValue(f, ret, 'filter');\n          addValue(f, ret, 'width');\n          addValue(f, ret, 'icon');\n          if (f.context) {\n            ret.context = {};\n            addValue(f.context, ret.context, 'count');\n            addValue(f.context, ret.context, 'total');\n          }\n          return ret;\n        });\n\n  if (card.modifyContext) {\n    card.modifyContext(context, r);\n  }\n\n  return {\n    label: card.label,\n    fields: fields,\n  };\n}\n\nmodule.exports = emitter;\n\n\n/***/ })\n/******/ ]);\n}); return ContactSummary;",
  "tasks": {
    "rules": "define Target { _id: null, contact: null, deleted: null, type: null, pass: null, date: null, groupBy: null }\ndefine Contact { contact: null, reports: null, tasks: null }\ndefine Task { _id: null, deleted: null, doc: null, contact: null, icon: null, date: null, readyStart: null, readyEnd: null, title: null, fields: null, resolved: null, priority: null, priorityLabel: null, reports: null, actions: null }\nrule GenerateEvents {\n  when { c: Contact } then { /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/*\nDeclarative tasks and targets (the elements exported by partner task.js and target.js files), are complex objects containing functions. \nDefinition-preparation.js binds a value for `this` in all the functions within a definition. \nThis fascilitates simple data sharing between functions, and allows function logic to reference the definition itself.\n*/\n\nfunction prepare(definition) {\n  var targetContext = {};\n  bindAllFunctionsToContext(definition, targetContext);\n  targetContext.definition = deepCopy(definition);\n}\n\nfunction bindAllFunctionsToContext(obj, context) {\n  var keys = Object.keys(obj);\n  for (var i in keys) {\n    var key = keys[i];\n    switch(typeof obj[key]) {\n      case 'object':\n        bindAllFunctionsToContext(obj[key], context);\n        break;\n      case 'function':\n        obj[key] = obj[key].bind(context);\n        break;\n    }\n  }\n}\n\nfunction deepCopy(obj) {\n  var copy = Object.assign({}, obj);\n  var keys = Object.keys(copy);\n  for (var i in keys) {\n    var key = keys[i];\n    if (Array.isArray(copy[key])) {\n      copy[key] = copy[key].slice(0);\n      for (var j = 0; j < copy[key].length; ++j) {\n        if (typeof copy[key][j] === 'object') {\n          copy[key][j] = deepCopy(copy[key][j]);\n        }\n      }\n    } else if (typeof copy[key] === 'object') {\n      copy[key] = deepCopy(copy[key]);\n    }\n  }\n  return copy;\n}\n\nmodule.exports = prepare;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* global c, emit, Task, Target */\n\nvar tasks = __webpack_require__(2);\nvar targets = __webpack_require__(3);\n\nvar taskEmitter = __webpack_require__(4); \nvar targetEmitter = __webpack_require__(5);\n\ntargetEmitter(targets, c, Utils, Target, emit);\ntaskEmitter(tasks, c, Utils, Task, emit);\n\nemit('_complete', { _id: true });\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = [{\r\n  name: 'covid-rdt-followup',\r\n  icon: 'icon-healthcare',\r\n  title: 'task.covid_followup.title',\r\n  appliesTo: 'contacts',\r\n  appliesToType: ['person'],\r\n  appliesIf: function (c) {\r\n    this.mostRecentRdt = Utils.getMostRecentReport(c.reports, 'covid_rdt');\r\n    return this.mostRecentRdt && Utils.getField(this.mostRecentRdt, 'test_result') === 'positive';\r\n  },\r\n  resolvedIf: function (c, r, event) {\r\n    const startTime = Utils.addDate(event.dueDate(c, r), -event.start);\r\n    const endTime = Utils.addDate(event.dueDate(c, r), event.end + 1);\r\n\r\n    const reportsAfterRdt = c.reports.filter(report => report.reported_date >= this.mostRecentRdt.reported_date);\r\n    return Utils.isFormSubmittedInWindow(reportsAfterRdt, 'covid_rdt_followup', startTime, endTime);\r\n  },\r\n  events: [{\r\n    start: 1,\r\n    end: 3,\r\n    dueDate: function () {\r\n      return Utils.addDate(new Date(this.mostRecentRdt.reported_date), 1);\r\n    },\r\n  }],\r\n  actions: [{\r\n    type: 'contacts',\r\n    form: 'covid_rdt_followup',\r\n    label: 'task.covid_followup.title',\r\n  }],\r\n},\r\n\r\n{\r\n  name: 'trace_follow_up',\r\n  icon: 'icon-healthcare',\r\n  title: 'task.trace_follow_up.title',\r\n  appliesTo: 'contacts',\r\n  appliesToType: ['person'],\r\n  appliesIf: function (contact) {\r\n    return !!contact.contact.patient_zero;\r\n  },\r\n  resolvedIf: function (contact) {\r\n    this.mostRecentTraceFollowUp = Utils.getMostRecentReport(contact.reports, 'covid_trace_follow_up');\r\n    return this.mostRecentTraceFollowUp &&\r\n      ['contacted', 'stop'].includes(Utils.getField(this.mostRecentTraceFollowUp, 'trace.result'));\r\n  },\r\n  events: [{\r\n    days: 0,\r\n    start: 0,\r\n    end: 30\r\n  }],\r\n  actions: [{\r\n    type: 'report',\r\n    form: 'covid_trace_follow_up',\r\n    label: 'task.trace_follow_up.title',\r\n  }],\r\n}\r\n];\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\r\nconst getField = (report, fieldPath) => [...(fieldPath || '').split('.')]\r\n    .reduce((prev, fieldName) => {\r\n        if (prev === undefined) { return undefined; }\r\n        return prev[fieldName];\r\n    }, report);\r\n\r\nconst isTraveler = (contact) => { return getField(contact.contact, 'role') === 'traveler'; };\r\n\r\nconst isToday = (someDate) => {\r\n    const today = new Date();\r\n    return someDate.getDate() === today.getDate() &&\r\n        someDate.getMonth() === today.getMonth() &&\r\n        someDate.getFullYear() === today.getFullYear();\r\n};\r\n\r\nconst isDeclarationForm = (report) => { return report.form === 'declaration'; };\r\nconst isLocatorForm = (report) => { return report.form === 'locator'; };\r\nconst isQuarantineForm = (report) => { return report.form === 'quarantine'; };\r\nconst isReferralForm = (report) => { return report.form === 'referral'; };\r\n\r\nmodule.exports = [\r\n\r\n    {\r\n        id: 'travellers-registered-this-month',\r\n        type: 'count',\r\n        icon: 'icon-person',\r\n        goal: 0,\r\n        translation_key: 'targets.travellers.count',\r\n        subtitle_translation_key: 'targets.this_month.subtitle',\r\n        context:'user.role === \"inputter\"',\r\n        appliesTo: 'contacts',\r\n        appliesToType: ['person'],\r\n        appliesIf: isTraveler,\r\n        date: 'reported'\r\n    },\r\n\r\n    {\r\n        id: 'travellers-registered-today',\r\n        type: 'count',\r\n        icon: 'icon-person',\r\n        goal: 0,\r\n        translation_key: 'targets.travellers.count',\r\n        subtitle_translation_key: 'targets.today.subtitle',\r\n        context:'user.role === \"inputter\"',\r\n        appliesTo: 'contacts',\r\n        appliesToType: ['person'],\r\n        appliesIf: function (contact) { return isTraveler(contact) && isToday(new Date(contact.contact.reported_date)); },\r\n        date: 'reported'\r\n    },\r\n\r\n    {\r\n        id: 'reports-with-risk-this-month',\r\n        type: 'count',\r\n        icon: 'icon-risk',\r\n        goal: 0,\r\n        translation_key: 'targets.risk.count',\r\n        subtitle_translation_key: 'targets.this_month.subtitle',\r\n        context:'user.role === \"inputter\"',\r\n        appliesTo: 'reports',\r\n        appliesToType: ['declaration'],\r\n        idType: 'contact',\r\n        appliesIf: function (contact, report) {\r\n            return getField(report, 'fields.r_high_risk') === 'true';\r\n        },\r\n        date: 'reported'\r\n    },\r\n\r\n    {\r\n        id: 'travellers-with-declaration-this-month',\r\n        type: 'percent',\r\n        icon: 'icon-form-general',\r\n        goal: 100,\r\n        translation_key: 'targets.declaration.percent',\r\n        subtitle_translation_key: 'targets.this_month.subtitle',\r\n        percentage_count_translation_key: 'targets.traveller.percent',\r\n        context:'user.role === \"inputter\"',\r\n        appliesTo: 'contacts',\r\n        appliesToType: ['person'],\r\n        appliesIf: isTraveler,\r\n        passesIf: function (contact) {\r\n            return contact.reports.some((report) => { return isDeclarationForm(report); });\r\n        },\r\n        date: 'reported'\r\n    },\r\n\r\n\r\n    {\r\n        id: 'travellers-with-quarantine-today',\r\n        type: 'count',\r\n        icon: 'icon-calendar',\r\n        goal: 0,\r\n        translation_key: 'targets.quarantine.count',\r\n        subtitle_translation_key: 'targets.today.subtitle',\r\n        context:'user.role === \"inputter\"',\r\n        appliesTo: 'reports',\r\n        appliesToType: ['quarantine'],\r\n        idType: 'contact',\r\n        appliesIf: function (contact, report) {\r\n            return isToday(new Date(report.reported_date));\r\n        },\r\n        date: 'reported'\r\n    },\r\n\r\n    {\r\n        id: 'travellers-with-quarantine-this-month',\r\n        type: 'percent',\r\n        icon: 'icon-calendar',\r\n        goal: 100,\r\n        translation_key: 'targets.quarantine.percent',\r\n        subtitle_translation_key: 'targets.this_month.subtitle',\r\n        context:'user.role === \"inputter\"',\r\n        appliesTo: 'contacts',\r\n        appliesToType: ['person'],\r\n        appliesIf: isTraveler,\r\n        passesIf: function (contact) {\r\n            return contact.reports.some((report) => { return isQuarantineForm(report); });\r\n        },\r\n        date: 'reported'\r\n    },\r\n\r\n    {\r\n        id: 'travellers-with-locator-this-month',\r\n        type: 'percent',\r\n        icon: 'icon-service-rating',\r\n        goal: 100,\r\n        translation_key: 'targets.locator.percent',\r\n        subtitle_translation_key: 'targets.this_month.subtitle',\r\n        context:'user.role === \"inputter\"',\r\n        appliesTo: 'contacts',\r\n        appliesToType: ['person'],\r\n        appliesIf: isTraveler,\r\n        passesIf: function (contact) {\r\n            return contact.reports.some((report) => { return isLocatorForm(report); });\r\n        },\r\n        date: 'reported'\r\n    },\r\n\r\n    {\r\n        id: 'travellers-with-referral-today',\r\n        type: 'count',\r\n        icon: 'icon-hospital',\r\n        goal: 0,\r\n        translation_key: 'targets.referral.count',\r\n        subtitle_translation_key: 'targets.today.subtitle',\r\n        context:'user.role === \"inputter\"',\r\n        appliesTo: 'contacts',\r\n        appliesToType: ['person'],\r\n        appliesIf: function (contact) {\r\n            return isTraveler(contact) &&\r\n                contact.reports.some((report) => { return isToday(new Date(report.reported_date)) && isReferralForm(report); });\r\n        },\r\n        date: 'reported'\r\n    },\r\n\r\n    {\r\n        id: 'travellers-with-referral-this-month',\r\n        type: 'count',\r\n        icon: 'icon-hospital',\r\n        goal: 0,\r\n        translation_key: 'targets.referral.count',\r\n        subtitle_translation_key: 'targets.this_month.subtitle',\r\n        context:'user.role === \"inputter\"',\r\n        appliesTo: 'contacts',\r\n        appliesToType: ['person'],\r\n        appliesIf: function (contact) {\r\n            return isTraveler(contact) && contact.reports.some((report) => { return isReferralForm(report); });\r\n        },\r\n        date: 'reported'\r\n    }\r\n\r\n];\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar prepareDefinition = __webpack_require__(0);\n\nfunction taskEmitter(taskDefinitions, c, Utils, Task, emit) {\n  if (!taskDefinitions) return;\n\n  var taskDefinition, r;\n  for (var idx1 = 0; idx1 < taskDefinitions.length; ++idx1) {\n    taskDefinition = taskDefinitions[idx1];\n    prepareDefinition(taskDefinition);\n\n    switch (taskDefinition.appliesTo) {\n      case 'reports':\n      case 'scheduled_tasks':\n        for (var idx2=0; idx2<c.reports.length; ++idx2) {\n          r = c.reports[idx2];\n          emitTasks(taskDefinition, Utils, Task, emit, c, r);\n        }\n        break;\n      case 'contacts':\n        if (c.contact) {\n          emitTasks(taskDefinition, Utils, Task, emit, c);\n        }\n        break;\n      default:\n        throw new Error('Unrecognised task.appliesTo: ' + taskDefinition.appliesTo);\n    }\n  }\n}\n\nfunction emitTasks(taskDefinition, Utils, Task, emit, c, r) {\n  var i;\n\n  if (taskDefinition.appliesToType) {\n    var contactType = c.contact.type === 'contact' ? c.contact.contact_type : c.contact.type;\n    var shouldApply = taskDefinition.appliesTo === 'contacts' ?\n      taskDefinition.appliesToType.indexOf(contactType) !== -1 :\n      r && taskDefinition.appliesToType.indexOf(r.form) !== -1;\n\n    if (!shouldApply) {\n      return;\n    }\n  }\n\n  if (taskDefinition.appliesTo !== 'scheduled_tasks' && taskDefinition.appliesIf && !taskDefinition.appliesIf(c, r)) {\n    return;\n  }\n\n  if (taskDefinition.appliesTo === 'scheduled_tasks'){\n    if (r && taskDefinition.appliesIf) {\n      if (!r.scheduled_tasks) {\n        return;\n      }\n\n      for (i = 0; i < r.scheduled_tasks.length; i++) {\n        if (taskDefinition.appliesIf(c, r, i)) {\n          emitForEvents(i);\n        }\n      }\n    }\n  } else {\n    emitForEvents();\n  }\n\n  function obtainContactLabelFromSchedule(taskDefinition, c, r) {\n    var contactLabel;\n    if (typeof taskDefinition.contactLabel === 'function') {\n      contactLabel = taskDefinition.contactLabel(c, r);\n    } else {\n      contactLabel = taskDefinition.contactLabel;\n    }\n  \n    return contactLabel ? { name: contactLabel } : c.contact;\n  }  \n\n  function emitForEvents(scheduledTaskIdx) {\n    var i, dueDate = null, event, priority, task;\n    for (i = 0; i < taskDefinition.events.length; i++) {\n      event = taskDefinition.events[i];\n\n      if (event.dueDate) {\n        dueDate = event.dueDate(event, c, r, scheduledTaskIdx);\n      } else if (r) {\n        if (scheduledTaskIdx !== undefined) {\n          dueDate = new Date(Utils.addDate(new Date(r.scheduled_tasks[scheduledTaskIdx].due), event.days));\n        } else {\n          dueDate = new Date(Utils.addDate(new Date(r.reported_date), event.days));\n        }\n      } else {\n        if (event.dueDate) {\n          dueDate = event.dueDate(event, c);\n        } else {\n          var defaultDueDate = c.contact && c.contact.reported_date ? new Date(c.contact.reported_date) : new Date();\n          dueDate = new Date(Utils.addDate(defaultDueDate, event.days));\n        }\n      }\n\n      if (!Utils.isTimely(dueDate, event)) {\n        continue;\n      }\n\n      task = {\n        // One task instance for each event per form that triggers a task, not per contact\n        // Otherwise they collide when contact has multiple reports of the same form\n        _id: (r ? r._id : c.contact && c.contact._id) + '~' + (event.id || i) + '~' + taskDefinition.name,\n        deleted: !!((c.contact && c.contact.deleted) || r ? r.deleted : false),\n        doc: c,\n        contact: obtainContactLabelFromSchedule(taskDefinition, c, r),\n        icon: taskDefinition.icon,\n        date: dueDate,\n        readyStart: event.start || 0,\n        readyEnd: event.end || 0,\n        title: taskDefinition.title,\n        resolved: taskDefinition.resolvedIf(c, r, event, dueDate, scheduledTaskIdx),\n        actions: taskDefinition.actions.map(initActions),\n      };\n\n      if (scheduledTaskIdx !== undefined) {\n        task._id += '-' + scheduledTaskIdx;\n      }\n\n      priority = taskDefinition.priority;\n      if (typeof priority === 'function') {\n        priority = priority(c, r);\n      }\n\n      if (priority) {\n        task.priority = priority.level;\n        task.priorityLabel = priority.label;\n      }\n\n      emit('task', new Task(task));\n    }\n  }\n\n  function initActions(def) {\n    var appliesToReport = !!r;\n    var content = {\n      source: 'task',\n      source_id: appliesToReport ? r._id : c.contact && c.contact._id,\n      contact: c.contact,\n    };\n\n    if (def.modifyContent) {\n      def.modifyContent(content, c, r);\n    }\n\n    return {\n      type: 'report',\n      form: def.form,\n      label: def.label || 'Follow up',\n      content: content,\n    };\n  }\n}\n\nmodule.exports = taskEmitter;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar prepareDefinition = __webpack_require__(0);\n\nfunction targetEmitter(targets, c, Utils, Target, emit) {\n  for (var idx1 = 0; idx1 < targets.length; ++idx1) {\n    var target = targets[idx1];\n    prepareDefinition(target);\n\n    switch (target.appliesTo) {\n      case 'contacts':\n        emitTargetFor(target, Target, Utils, emit, c);\n        break;\n      case 'reports':\n        for (var idx2 = 0; idx2 < c.reports.length; ++idx2) {\n          var r = c.reports[idx2];\n          emitTargetFor(target, Target, Utils, emit, c, r);\n        }\n        break;\n      default:\n        throw new Error('Unrecognised target.appliesTo: ' + target.appliesTo);\n    }\n  }\n}\n\nfunction determineDate(targetConfig, Utils, c, r) {\n  if (typeof targetConfig.date === 'function') {\n    return targetConfig.date(c, r);\n  }\n  \n  if (targetConfig.date === undefined || targetConfig.date === 'now') {\n    return Utils.now().getTime();\n  }\n\n  if (targetConfig.date === 'reported') {\n    return r ? r.reported_date : c.contact.reported_date;\n  }\n  \n  throw new Error('Unrecognised value for target.date: ' + targetConfig.date);\n}\n\nfunction determineInstanceIds(targetConfig, c, r) {\n  var instanceIds;\n  if (typeof targetConfig.idType === 'function') {\n    instanceIds = targetConfig.idType(c, r);\n  } else if (targetConfig.idType === 'report') {\n    instanceIds = r && r._id;\n  } else {\n    instanceIds = c.contact && c.contact._id;\n  }\n\n  if (!Array.isArray(instanceIds)) {\n    instanceIds = [instanceIds];\n  }\n\n  return instanceIds;\n}\n\nfunction emitTargetFor(targetConfig, Target, Utils, emit, c, r) {\n  var isEmittingForReport = !!r;\n  if (!c.contact) return;\n  var contactType = c.contact.contact_type || c.contact.type;\n  var appliesToKey = isEmittingForReport ? r.form : contactType;\n  if (targetConfig.appliesToType && targetConfig.appliesToType.indexOf(appliesToKey) < 0) return;\n  if (targetConfig.appliesIf && !targetConfig.appliesIf (c, r)) return;\n\n  var instanceDoc = isEmittingForReport ? r : c.contact;\n  var instanceIds = determineInstanceIds(targetConfig, c, r);\n  var pass = !targetConfig.passesIf || !!targetConfig.passesIf(c, r);\n  var date = determineDate(targetConfig, Utils, c, r);\n  var groupBy = targetConfig.groupBy && targetConfig.groupBy(c, r);\n\n  function emitTargetInstance(i) {\n    emit('target', i);\n  }\n\n  for (var i = 0; i < instanceIds.length; ++i) {\n    var instance = new Target({\n      _id: instanceIds[i] + '~' + targetConfig.id,\n      contact: c.contact,\n      deleted: !!instanceDoc.deleted,\n      type: targetConfig.id,\n      pass: pass,\n      groupBy: groupBy,\n      date: date,\n    });\n\n    if (targetConfig.emitCustom) {\n      targetConfig.emitCustom(emitTargetInstance, instance, c, r);\n    } else {\n      emitTargetInstance(instance);\n    }\n  }\n}\n\nmodule.exports = targetEmitter;\n\n\n/***/ })\n/******/ ]); }\n}",
    "targets": {
      "enabled": true,
      "items": [
        {
          "id": "travellers-registered-this-month",
          "type": "count",
          "translation_key": "targets.travellers.count",
          "icon": "icon-person",
          "context": "user.role === \"inputter\"",
          "subtitle_translation_key": "targets.this_month.subtitle"
        },
        {
          "id": "travellers-registered-today",
          "type": "count",
          "translation_key": "targets.travellers.count",
          "icon": "icon-person",
          "context": "user.role === \"inputter\"",
          "subtitle_translation_key": "targets.today.subtitle"
        },
        {
          "id": "reports-with-risk-this-month",
          "type": "count",
          "translation_key": "targets.risk.count",
          "icon": "icon-risk",
          "context": "user.role === \"inputter\"",
          "subtitle_translation_key": "targets.this_month.subtitle"
        },
        {
          "id": "travellers-with-declaration-this-month",
          "type": "percent",
          "goal": 100,
          "translation_key": "targets.declaration.percent",
          "icon": "icon-form-general",
          "context": "user.role === \"inputter\"",
          "subtitle_translation_key": "targets.this_month.subtitle"
        },
        {
          "id": "travellers-with-quarantine-today",
          "type": "count",
          "translation_key": "targets.quarantine.count",
          "icon": "icon-calendar",
          "context": "user.role === \"inputter\"",
          "subtitle_translation_key": "targets.today.subtitle"
        },
        {
          "id": "travellers-with-quarantine-this-month",
          "type": "percent",
          "goal": 100,
          "translation_key": "targets.quarantine.percent",
          "icon": "icon-calendar",
          "context": "user.role === \"inputter\"",
          "subtitle_translation_key": "targets.this_month.subtitle"
        },
        {
          "id": "travellers-with-locator-this-month",
          "type": "percent",
          "goal": 100,
          "translation_key": "targets.locator.percent",
          "icon": "icon-service-rating",
          "context": "user.role === \"inputter\"",
          "subtitle_translation_key": "targets.this_month.subtitle"
        },
        {
          "id": "travellers-with-referral-today",
          "type": "count",
          "translation_key": "targets.referral.count",
          "icon": "icon-hospital",
          "context": "user.role === \"inputter\"",
          "subtitle_translation_key": "targets.today.subtitle"
        },
        {
          "id": "travellers-with-referral-this-month",
          "type": "count",
          "translation_key": "targets.referral.count",
          "icon": "icon-hospital",
          "context": "user.role === \"inputter\"",
          "subtitle_translation_key": "targets.this_month.subtitle"
        }
      ]
    }
  },
  "transitions": {
    "mark_for_outbound": true,
    "accept_patient_reports": false,
    "conditional_alerts": false,
    "default_responses": false,
    "update_sent_by": false,
    "registration": false,
    "update_clinics": true,
    "update_notifications": false,
    "update_scheduled_reports": false,
    "update_sent_forms": false,
    "generate_patient_id_on_people": true,
    "death_reporting": true
  },
  "outbound": {
    "textit-message": {
      "relevant_to": "doc.type === 'data_record' && doc.tasks && doc.tasks[0] && doc.tasks[0].state && doc.tasks[0].state === 'pending'",
      "destination": {
        "base_url": "https://textit.in",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "textit.in"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'0e819482-a9bf-45a9-9d44-21ce4a11b6c0'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.tasks[0].messages[0].to ]",
          "optional": false
        },
        "extra.message": {
          "expr": "doc.tasks[0].messages[0].message",
          "optional": false
        },
        "extra.uuid": {
          "expr": "doc.tasks[0].messages[0].uuid",
          "optional": false
        }
      }
    },
    "textit-patient": {
      "relevant_to": "doc.type === 'person' && doc.phone && doc.parent.parent.parent",
      "destination": {
        "base_url": "https://textit.in",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "textit.in"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'5e52fe1a-1236-49bb-8de5-df5724e85e20'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.phone ]",
          "optional": false
        },
        "extra.patient._id": "doc._id",
        "extra.patient._rev": "doc._rev",
        "extra.patient.name": "doc.name",
        "extra.patient.short_name": "doc.short_name",
        "extra.patient.date_of_birth": "doc.date_of_birth",
        "extra.patient.medic_id": "doc.patient_id",
        "extra.patient.phone": "doc.phone",
        "extra.chw._id": "doc.parent.parent.contact._id",
        "extra.chw.name": "doc.parent.parent.contact.name"
      }
    }
  },
  "forms": {
    "PHONE_VERIFICATION": {
      "meta": {
        "code": "PHONE_VERIFICATION",
        "icon": "icon-on",
        "translation_key": "form.phone_verification.title"
      },
      "fields": {
        "patient_id": {
          "labels": {
            "short": {
              "translation_key": "patient_id"
            },
            "tiny": {
              "en": "ID"
            }
          },
          "position": 0,
          "flags": {
            "input_digits_only": true
          },
          "length": [
            5,
            13
          ],
          "type": "string",
          "required": true
        }
      },
      "use_sentinel": true
    },
    "COVID_SYMPTOMS": {
      "meta": {
        "code": "COVID_SYMPTOMS",
        "icon": "icon-risk",
        "translation_key": "form.covid_symptoms.title"
      },
      "fields": {
        "patient_id": {
          "labels": {
            "short": {
              "translation_key": "patient_id"
            },
            "tiny": {
              "en": "ID"
            }
          },
          "position": 0,
          "flags": {
            "input_digits_only": true
          },
          "length": [
            5,
            13
          ],
          "type": "string",
          "required": true
        },
        "notes": {
          "labels": {
            "short": {
              "translation_key": "notes"
            },
            "tiny": {
              "en": "n"
            }
          },
          "position": 1,
          "length": [
            0,
            200
          ],
          "type": "string",
          "required": false
        }
      },
      "use_sentinel": true
    }
  }
}
